@page "/"
@inject CalculatorLogic.Calculator Calculator

<Title>Calculator</Title>

<div class="container mt-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-10">
            <h1>Calculator</h1>
        </div>
        <div class="col-2 text-end">
            <button type="button" class="btn btn-outline-secondary" style="background-color:@ButtonColor; color:black;  padding: 10px 20px;" @onclick="ComputeClearInputs">Clear</button>
        </div>
    </div>

    <!-- Result Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="alert alert-warning text-center" role="alert"  style="background-color: @ResultBackgroundColor; padding: 10px;">
                <p id="result" style="background-color: @ResultBackgroundColor; color: @TextColor; padding: 10px;">
                    @ResultMessage
                </p>
            </div>
        </div>
    </div>

    <!-- Input Section -->
    <div class="row mb-4">
        <div class="col-12">
            <label for="values" class="form-label">Values</label>
            <textarea id="values" class="form-control" rows="5" @bind="InputValues" ></textarea>
        </div>
    </div>

    <!-- Descriptive Statistics Section -->
    <div class="row mb-4">
        <div class="col-12">
            <h4>Descriptive Statistics</h4>
            <div class="d-grid gap-2">
                <button id="sample-std-dev-btn" type="button" class="btn btn-outline-secondary" style="background-color: @ButtonColor; color: black"  @onclick="ComputeSampleStandardDeviation">
                    Compute Sample Standard Deviation | one value per line
                </button>
                <button id="population-std-dev-btn" type="button" class="btn btn-outline-secondary" style="background-color: @ButtonColor; color: black"  @onclick="ComputePopulationStandardDeviation">
                    Compute Population Standard Deviation | one value per line
                </button>
                <button id="mean-btn" type="button" class="btn btn-outline-secondary" style="background-color: @ButtonColor; color: black"  @onclick="ComputeMean">
                    Compute Mean | one value per line
                </button>
                <button id="zscore-btn" type="button" class="btn btn-outline-secondary" style="background-color: @ButtonColor; color: black" @onclick="ComputeZScore">
                    Compute Z Score | value, mean, stdDev on one line
                </button>
            </div>
        </div>
    </div>

    <!-- Single Linear Regression Section -->
    <div class="row">
        <div class="col-12">
            <h4>Single Linear Regression</h4>
            <div class="d-grid gap-2">
                <button id="slr-btn" type="button" class="btn btn-outline-secondary" style="background-color: @ButtonColor; color: black" @onclick="ComputeLinearRegression">
                    Compute Single Linear Regression | one x,y pair per line
                </button>
                <button id="predictY-btn" type="button" class="btn btn-outline-secondary" style="background-color: @ButtonColor; color: black" @onclick="ComputeYFromRegression">
                    Predict Y from Regression Formula | x,m, b on one line
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    private string InputValues { get; set; } = "";

    private string ResultMessage { get; set; } = "Enter values below and select operation";
    private string ResultBackgroundColor { get; set; } = "#FFECD7";
    private string ButtonColor { get; set; } = "#EBEBEB";
    private string TextColor { get; set; } = "black";

    private List<Xy> Points { get; set; } = new();
    public sealed record Xy(double X, double Y);
    
    private double[] ParseInputValues(bool allowCommas = false)
    {
        // Reset colors to default
        ResultBackgroundColor = "#FFECD7"; // Default background color
        TextColor = "black"; // Default text color

        if (string.IsNullOrWhiteSpace(InputValues))
        {
            ResultBackgroundColor = "#B70F0A";
            TextColor = "#FFFFFF";
            throw new ArgumentException("Input cannot be empty.");
        }

        // If commas are not allowed, check for their presence in the input
        if (!allowCommas && InputValues.Contains(","))
        {
            ResultBackgroundColor = "#B70F0A";
            TextColor = "#FFFFFF";
            throw new ArgumentException("Comma-separated values are not allowed for this operation.");
        }

        // Split the input into potential numeric values
        var values = InputValues
            .Split(new[] { '\n', ' ', ';' }, StringSplitOptions.RemoveEmptyEntries);

        // Attempt to parse each value
        var numericValues = new List<double>();
        foreach (var value in values)
        {
            if (!double.TryParse(value.Trim(), out double result))
            {
                ResultBackgroundColor = "#B70F0A";
                TextColor = "#FFFFFF";
                throw new ArgumentException($"Invalid numeric value detected: '{value}'");
            }
            numericValues.Add(result);
        }

        if (numericValues.Count == 0)
        {
            ResultBackgroundColor = "#B70F0A";
            TextColor = "#FFFFFF";
            throw new ArgumentException("No valid numeric values were found in the input.");
        }

        return numericValues.ToArray();
    }
    
    private void ComputeClearInputs()
    {
        InputValues = "";
        ResultMessage = "Enter values below and select operation";
        // Reset Result and Background Color
        ResultBackgroundColor = "#FFECD7"; // Reset background color on new input
        TextColor = "black"; // Reset text color to black
    }
    
    private void ParseXYPairs()
    {
        Points.Clear(); // Clear previous points before parsing new input
        if (string.IsNullOrWhiteSpace(InputValues)) 
        {
            throw new ArgumentException("Input values cannot be empty.");
        }

        var pairs = InputValues.Split('\n');
        foreach (var pair in pairs)
        {
            var xy = pair.Split(',');
            if (xy.Length != 2) continue;

            if (double.TryParse(xy[0], out var x) && double.TryParse(xy[1], out var y))
            {
                Points.Add(new Xy(x, y));
            }
        }

        if (Points.Count == 0)
        {
            throw new ArgumentException("No valid x, y pairs found.");
        }

        ResultMessage = $"Parsed {Points.Count} points successfully.";
    }

    private void ComputeSampleStandardDeviation()
    {
        try
        {
            ResultBackgroundColor = "#FFECD7"; // Default tan background
            TextColor = "black"; // Default black text
            var values = ParseInputValues(); // Colors reset inside this method if inputs are valid
            var result = Calculator.ComputeSampleStandardDeviation(values);
            ResultMessage = $"Sample Standard Deviation: {result}";
        }
        catch (Exception ex)
        {
            ResultBackgroundColor = "#B70F0A"; // Red background for error
            TextColor = "#FFFFFF"; // White text for better visibility
            // Update the result message and visual feedback for errors
            ResultMessage = $"Error: {ex.Message}";
        }
    }
    
    private void ComputePopulationStandardDeviation()
    {
        // Logic for computing the population standard deviation
        try
        {
            ResultBackgroundColor = "#FFECD7"; // Default tan background
            TextColor = "black"; // Default black text
            var values = ParseInputValues();
            var result = Calculator.ComputePopulationStandardDeviation(values);
            ResultMessage = $"Population Standard Deviation: {result}";

        }
        catch (Exception ex)
        {
            // Update the result message and visual feedback for errors
            ResultMessage = $"Error: {ex.Message}";
            ResultBackgroundColor = "#B70F0A"; // Red background for error
            TextColor = "#FFFFFF"; // White text for better visibility
        }
    }

    private void ComputeMean()
    {
        try
        {
            ResultBackgroundColor = "#FFECD7"; // Default tan background
            TextColor = "black"; // Default black text

            var values = ParseInputValues();
            var result = Calculator.ComputeMean(values);
            ResultMessage = $"Mean: {result:F0}";
        }
        catch (Exception ex)
        {
            ResultBackgroundColor = "#B70F0A"; // Red background for error
            TextColor = "#FFFFFF"; // White text for better visibility
            ResultMessage = $"Error: {ex.Message}";
        }
    }


    private void ComputeZScore()
    {
        try
        {
            ResultBackgroundColor = "#FFECD7"; // Default tan background
            TextColor = "black"; // Default black text

            // Split input into parts
            var parts = InputValues.Split(',', StringSplitOptions.TrimEntries);

            // Validate input
            if (parts.Length != 3)
            {
                throw new ArgumentException("Input must contain exactly three values: value, mean, and standard deviation.");
            }

            // Parse values
            if (!double.TryParse(parts[0], out var value))
            {
                throw new ArgumentException("Invalid value input.");
            }
            if (!double.TryParse(parts[1], out var mean))
            {
                throw new ArgumentException("Invalid mean input.");
            }
            if (!double.TryParse(parts[2], out var stdDev) || stdDev <= 0)
            {
                throw new ArgumentException("Standard deviation must be a positive number.");
            }

            // Compute the Z-Score
            var zScore = Calculator.ComputeZScore(value, mean, stdDev);

            // Update the result message
            ResultMessage = $"Z-Score: {zScore:F5}";
        }
        catch (Exception ex)
        {
            ResultBackgroundColor = "#B70F0A"; // Red background for error
            TextColor = "#FFFFFF"; // White text for better visibility
            // Update the result message and visual feedback for errors
            ResultMessage = $"Error: {ex.Message}";
        }
    }


    private void ComputeLinearRegression()
    {
        try
        {
            ResultBackgroundColor = "#FFECD7"; // Default tan background
            TextColor = "black"; // Default black text

            // Parse the input data into Points
            ParseXYPairs();

            // Convert Points (List<XY>) to List<(double X, double Y)>
            var tuplePoints = Points.Select(p => (p.X, p.Y)).ToList();

            // Pass the tuplePoints to the CalculatorInstance
            var result = Calculator.ComputeSingleLinearRegression(tuplePoints);

            // Display the linear regression result
            ResultMessage = $"Single Linear Regression Formula: y = {result.Slope:F5}X + {result.Intercept:F4}";
        }
        catch (Exception ex)
        {
            ResultBackgroundColor = "#B70F0A"; // Red background for error
            TextColor = "#FFFFFF"; // White text for better visibility
            // Update the result message and visual feedback for errors
            ResultMessage = $"Error: {ex.Message}";
        }
    }

    private void ComputeYFromRegression()
    {
        
        try
        {
            ResultBackgroundColor = "#FFECD7"; // Default tan background
            TextColor = "black"; // Default black text

            // Split the input into three parts: x, m, and b
            var parts = InputValues.Split(',', StringSplitOptions.TrimEntries);

            // Validate there are exactly 3 parts
            if (parts.Length != 3)
                throw new ArgumentException("Input must contain exactly three values: x, m, and b.");

            // Parse the values
            if (!double.TryParse(parts[0], out var x))
                throw new ArgumentException("Invalid x input.");
            if (!double.TryParse(parts[1], out var m))
                throw new ArgumentException("Invalid m input.");
            if (!double.TryParse(parts[2], out var b))
                throw new ArgumentException("Invalid b input.");

            // Compute Y using the linear regression formula: Y = m * x + b
            var y = Calculator.ComputePredictYFromLinearRegression(x, m, b);

            // Update the result message
            ResultMessage = $"Single Linear Regression Prediction y = {y}";
        }
        catch (Exception ex)
        {
            ResultBackgroundColor = "#B70F0A"; // Red background for error
            TextColor = "#FFFFFF"; // White text for better visibility
            // Update the result message and visual feedback for errors
            ResultMessage = $"Error: {ex.Message}";
        }
    }
}
